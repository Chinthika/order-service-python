name: Prod Rollout

on:
  push:
    branches:
      - main
  workflow_dispatch: { }

concurrency:
  group: order-service-${{ github.ref }}
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"
  WORKING_DIRECTORY: order-service-main
  HELM_CHART_PATH: Infrastructure/helm
  DOCKER_IMAGE: chinthika/order-service
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: order-service-shared-eks

jobs:
  build-and-push-image:
    name: Build and Scan image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine image tag
        id: meta
        run: |
          echo "image_tag=${GITHUB_SHA::8}" >> "$GITHUB_OUTPUT"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Infrastructure/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.meta.outputs.image_tag }}
            ${{ env.DOCKER_IMAGE }}:latest
  

  deploy-production:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://prod.chinthika-jayani.click
    env:
      IMAGE_TAG: ${{ needs.build-and-push-image.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.29.2

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - name: Configure kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Create/update image pull secret
        run: |
          kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret docker-registry dockerhub-creds \
            --namespace prod \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy chart
        run: |
          helm upgrade --install order-service-prod ${{ env.HELM_CHART_PATH }} \
            --namespace prod --atomic --timeout 5m0s \
            --create-namespace \
            -f ${{ env.HELM_CHART_PATH }}/values.prod.yaml \
            --set image.tag=${{ env.IMAGE_TAG }} \
            --set image.repository=${{ env.DOCKER_IMAGE }} \
            --set ingress.certificateArn=${{ secrets.ACM_CERTIFICATE_ARN }} \
            --set-string newrelic-k8s-metrics-adapter.config.accountID=${{ secrets.NEW_RELIC_ACCOUNT_ID }} \
            --set-string newrelic-k8s-metrics-adapter.personalAPIKey=${{ secrets.NEW_RELIC_API_KEY }} \
            --set env[8].name=NEW_RELIC_LICENSE_KEY --set env[8].value=${{ secrets.NEW_RELIC_LICENSE_KEY }} 

      - name: Wait for rollout
        run: kubectl rollout status deployment/order-service-prod -n prod --timeout=180s

  run-sanity-tests:
    name: Run sanity tests
    runs-on: ubuntu-latest
    needs:
      - deploy-production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.29.2

      - name: Configure kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Simple Health Check
        run: |
          kubectl -n prod delete job order-service-smoke --ignore-not-found
          kubectl -n prod create job order-service-smoke \
            --image=curlimages/curl:8.5.0 -- \
            curl -fsS --retry 5 --retry-delay 5 \
              http://order-service-prod.prod.svc.cluster.local:8000/health
          kubectl -n prod wait --for=condition=complete --timeout=180s job/order-service-smoke
          kubectl -n prod delete job order-service-smoke

      - name: Run Regression Tests
        run: |
          echo 'Tests would run here...'
