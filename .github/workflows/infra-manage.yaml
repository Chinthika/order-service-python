name: Infrastructure Manage

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options: [staging, production]
        default: staging
      action:
        description: "Action to perform"
        required: true
        type: choice
        options: [create, destroy]
        default: create

permissions:
  id-token: write
  contents: read

env:
  TF_IN_AUTOMATION: true
  AWS_REGION: us-east-1
  TF_WORKING_DIR: Infrastructure/terraform

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }} (${{ github.event.inputs.environment }})
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_root_domain: ${{ secrets.ROOT_DOMAIN }}
          TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
          TF_VAR_prod_subdomain: prod
          TF_VAR_staging_subdomain: staging
          TF_VAR_newrelic_license_key: ${{ secrets.NEWRELIC_LICENSE_KEY }}
          TF_VAR_newrelic_account_id: ${{ secrets.NEWRELIC_ACCOUNT_ID }}
          TF_VAR_newrelic_region: US
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Phase 1 Plan (deploy_workloads=false)
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_deploy_workloads: "false"
        run: |
          terraform plan -out=tfplan.phase1

      - name: Phase 1 Apply (deploy_workloads=false)
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform apply -auto-approve tfplan.phase1

      - name: Grant temporary cluster admin (optional)
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          EKS_ADMIN_ROLE_ARN: ${{ secrets.EKS_ADMIN_ROLE_ARN }}
        run: |
          if [ -n "${EKS_ADMIN_ROLE_ARN}" ]; then
            terraform apply -auto-approve -var="eks_admin_role_arn=${EKS_ADMIN_ROLE_ARN}" -var="deploy_workloads=false"
          fi

      - name: Phase 2 Plan (deploy_workloads=true)
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_deploy_workloads: "true"
        run: |
          terraform plan -out=tfplan.phase2

      - name: Phase 2 Apply (deploy_workloads=true)
        if: ${{ github.event.inputs.action == 'create' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform apply -auto-approve tfplan.phase2

      - name: Destroy (full)
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_deploy_workloads: "true"
        run: |
          terraform destroy -auto-approve
