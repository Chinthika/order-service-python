name: manage-infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - staging
          - production
      action:
        description: "Terraform action"
        required: true
        type: choice
        options:
          - create
          - destroy

permissions:
  contents: read
  id-token: write

concurrency:
  group: infra-${{ github.event.inputs.environment }}-${{ github.event.inputs.action }}
  cancel-in-progress: false

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }} (${{ github.event.inputs.environment }})
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: Infrastructure/terraform
    env:
      AWS_REGION: us-east-1
      ROOT_DOMAIN: chinthika-jayani.click
      STAGING_SUBDOMAIN: staging
      PROD_SUBDOMAIN: prod
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
      TF_BACKEND_DYNAMODB_TABLE: ${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: "Configure Terraform variables"
        run: |
          echo "TF_VAR_root_domain=$ROOT_DOMAIN" >> $GITHUB_ENV
          echo "TF_VAR_staging_subdomain=$STAGING_SUBDOMAIN" >> $GITHUB_ENV
          echo "TF_VAR_prod_subdomain=$PROD_SUBDOMAIN" >> $GITHUB_ENV
          echo "TF_VAR_route53_zone_id=${{ secrets.ROUTE53_ZONE_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_grafana_admin_password=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> $GITHUB_ENV
          echo "TF_VAR_aws_region=$AWS_REGION" >> $GITHUB_ENV
          if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
            echo "TF_VAR_environment=staging" >> $GITHUB_ENV
            echo "TF_BACKEND_KEY=staging/terraform.tfstate" >> $GITHUB_ENV
            echo "TF_VAR_eks_admin_role_arn=${{ secrets.EKS_ADMIN_ROLE_ARN_STAGING }}" >> $GITHUB_ENV
            echo "TF_VAR_cluster_name=order-service-staging-eks" >> $GITHUB_ENV
          else
            echo "TF_VAR_environment=prod" >> $GITHUB_ENV
            echo "TF_BACKEND_KEY=production/terraform.tfstate" >> $GITHUB_ENV
            echo "TF_VAR_eks_admin_role_arn=${{ secrets.EKS_ADMIN_ROLE_ARN_PROD }}" >> $GITHUB_ENV
            echo "TF_VAR_cluster_name=order-service-prod-eks" >> $GITHUB_ENV
          fi

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform init
        run: |
          terraform init \
            -backend-config="bucket=$TF_BACKEND_BUCKET" \
            -backend-config="dynamodb_table=$TF_BACKEND_DYNAMODB_TABLE" \
            -backend-config="key=$TF_BACKEND_KEY" \
            -backend-config="region=$AWS_REGION"

      - name: Terraform plan
        id: plan
        run: |
          if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            terraform plan -destroy -input=false -out=tfplan.binary
          else
            terraform plan -input=false -out=tfplan.binary
          fi

#      - name: Upload plan
#        uses: actions/upload-artifact@v4
#        with:
#          name: terraform-plan-${{ github.run_id }}
#          path: Infrastructure/terraform/tfplan.binary

      - name: Terraform apply
        if: github.event.inputs.action == 'create'
        run: |
          terraform apply -target=module.eks -auto-approve
          aws eks wait cluster-active --name $TF_VAR_cluster_name --region $AWS_REGION
          terraform apply -auto-approve

      - name: Terraform destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve
