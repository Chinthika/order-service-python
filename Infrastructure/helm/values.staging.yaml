replicaCount: 1
namespace: staging

image:
  repository: chinthika/order-service
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets:
  - name: dockerhub-creds

serviceAccount:
  create: true
  name: ""
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/order-service-secrets-staging

podAnnotations: { }

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  runAsNonRoot: true

env:
  - name: PYTHONPATH
    value: /app
  - name: ENVIRONMENT
    value: staging
  - name: LOG_LEVEL
    value: DEBUG
  - name: SECRETS_MANAGER_ENABLED
    value: "true"
  - name: AWS_REGION
    value: us-east-1
  - name: AWS_SECRET_NAME
    value: order-service/staging

envFromSecrets: [ ]
envFromConfigMaps: [ ]
envFromConfigMapsRef: [ ]

volumeMounts: [ ]
volumes: [ ]
lifecycle: { }

service:
  type: ClusterIP
  port: 8000
  targetPort: 8000

livenessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 15
  periodSeconds: 15
  timeoutSeconds: 3
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 3

ingress:
  enabled: true
  className: alb
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=60
  certificateArn: ""
  hosts:
    - host: staging.chinthika-jayani.click
      paths:
        - path: /
          pathType: Prefix
  tls: [ ]

resources:
  requests:
    cpu: 150m
    memory: 192Mi
  limits:
    cpu: 300m
    memory: 384Mi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 65
  targetMemoryUtilizationPercentage: 75
  newRelic:
    query: "FROM Metric SELECT rate(sum(http.server.request.count), 1 minute) WHERE appName = 'order-service-staging' FACET podName"
    threshold: "20"  # scale when >20 req/min per pod


podDisruptionBudget:
  enabled: false

nodeSelector: { }

tolerations: [ ]

affinity: { }
