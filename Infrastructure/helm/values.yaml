replicaCount: 1

image:
  repository: order-service
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []

serviceAccount:
  create: true
  name: ""
  annotations: {}

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

env: []

envFromSecrets: []

envFromConfigMaps: []

envFromConfigMapsRef: []

volumeMounts: []

volumes: []

lifecycle: {}

service:
  type: ClusterIP
  port: 8000
  targetPort: 8000

livenessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

ingress:
  enabled: false
  className: ""
  annotations: {}
  certificateArn: ""
  hosts: []
  tls: []

resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: null
  newRelic:
    accountId: "SetMeAtRuntime"
    region: "US"
    query: "FROM Metric SELECT rate(sum(http.server.request.count), 1 minute) WHERE appName = 'order-service' FACET podName"
    threshold: "20"  # scale when >20 req/min per pod
    licenseKey: "SetMeAtRuntime"

serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  additionalLabels: {}

podDisruptionBudget:
  enabled: false
  minAvailable: null
  maxUnavailable: 1

nodeSelector: {}

tolerations: []

affinity: {}
