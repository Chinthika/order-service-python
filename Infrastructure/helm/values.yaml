replicaCount: 1

image:
  repository: order-service
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: [ ]

serviceAccount:
  create: true
  name: ""
  annotations: { }

podAnnotations: { }

podSecurityContext: { }

securityContext: { }

env: [ ]

envFromSecrets: [ ]

envFromConfigMaps: [ ]

envFromConfigMapsRef: [ ]

volumeMounts: [ ]

volumes: [ ]

lifecycle: { }

service:
  type: ClusterIP
  port: 8000
  targetPort: 8000

livenessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

ingress:
  enabled: false
  className: ""
  annotations: { }
  certificateArn: ""
  hosts: [ ]
  tls: [ ]

resources: { }

autoscaling:
  enabled: true
  # Use native HPA with External metrics (New Relic k8s metrics adapter)
  external:
    enabled: true
    metrics: { }
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 60
  targetMemoryUtilizationPercentage: null


podDisruptionBudget:
  enabled: false
  minAvailable: null
  maxUnavailable: 1

nodeSelector: { }

tolerations: [ ]

affinity: { }


newrelic-k8s-metrics-adapter:
  enabled: true
  personalAPIKey: "<API_KEY>"
  config:
    accountID: "<ACCOUNT_ID>"
    externalMetrics:
      service_latency_p95:
        query: >
          FROM Metric SELECT percentile(http.server.duration, 95)
          WHERE k8s.serviceName = 'order-service-prod'
          SINCE 2 MINUTES AGO
      requests_per_pod:
        query: >
          FROM Metric SELECT rate(sum(http.server.requestsPerSecond), 1 minute)
          FACET k8s.podName
          WHERE k8s.serviceName = 'order-service-prod'
          SINCE 2 MINUTES AGO


